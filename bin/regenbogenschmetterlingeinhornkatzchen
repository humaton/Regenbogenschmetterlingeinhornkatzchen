#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'cdkconfig'

program :version, '0.0.1'
program :description, 'Pllm'

adb_path = File.join(File.dirname(__FILE__), '..') + "/adb-atomic-developer-bundle/components"
centos_adb_path = adb_path+"/centos/centos-with-docker"
rhel_adb_path = adb_path+"/rhel/rhel-with-docker"
vagrant_base_cmd = "vagrant" #"VAGRANT_LOG=info vagrant"
dockerfile_example_path =  File.join(File.dirname(__FILE__), '..') + "/examples/Dockerfile"
dockerfile_example_script_path =  File.join(File.dirname(__FILE__), '..') + "/examples/start.sh"


command :new do |c|
  c.syntax = 'cdk new [options]'
  c.summary = 'Create new container with host'
  c.description = 'Create directory with container and host configurations'
  c.example 'Create new container configuration with atomic host to deploy', 'cdk new --name Geablestapler --host rhel-atomic'
  c.option '--name NAME', String, 'Define name of a container'
  c.option '--host TYPE', String, 'Choose host for deployment: rhel-docker, rhel-atomic, centos-docker, centos-atomic'
  c.action do |args, options|
    if options.name
      FileUtils.mkdir_p "#{options.name}/host"
      host_vagrant_file_path = ""
      guest_vagrant_file_path = ""
      
      case options.host
	when "rhel-atomic"
	    host_vagrant_file_path = rhel_adb_path+'/atomic-docker-host/Vagrantfile'
	    guest_vagrant_file_path = rhel_adb_path+'/sample-dev/Vagrantfile'
        when "rhel-docker"
            host_vagrant_file_path = rhel_adb_path+'/rhel-docker-host/Vagrantfile'
            guest_vagrant_file_path = rhel_adb_path+'/sample-dev/Vagrantfile'
        when "centos-atomic"
            host_vagrant_file_path = centos_adb_path+'/atomic-docker-host/Vagrantfile'
            guest_vagrant_file_path = centos_adb_path+'/sample-dev/Vagrantfile'
        when "centos-docker"
            host_vagrant_file_path = centos_adb_path+'/centos-docker-host/Vagrantfile'
            guest_vagrant_file_path = centos_adb_path+'/sample-dev/Vagrantfile'
	else
	    host_vagrant_file_path = centos_adb_path+'/centos-docker-host/Vagrantfile'
            guest_vagrant_file_path = centos_adb_path+'/sample-dev/Vagrantfile'
      end
      
      FileUtils.cp host_vagrant_file_path, "./#{options.name}/host/"
      say "#{options.host} host Vagrantfile prepared"
      FileUtils.cp guest_vagrant_file_path, "./#{options.name}/"
      
      text = File.read("./#{options.name}/Vagrantfile")
      new_contents = text.gsub(/(d.vagrant_vagrantfile[A-Za-z\t . _ = " \/ -]+)/, "d.vagrant_vagrantfile = \"./host/Vagrantfile\"")
      # To write changes to the file, use:
      File.open("./#{options.name}/Vagrantfile", "w") {|file| file.puts new_contents }
      
      say "#{options.name} Guest Vagrantfile prepared"
      
      if agree "do you want to generate Dockerfile?", false
	FileUtils.cp dockerfile_example_path, "./#{options.name}/"
        FileUtils.cp dockerfile_example_script_path, "./#{options.name}/start.sh"
      end
    else
     say "You have to specify name"  
    end  
  end
end

command :vagrant do |c|
  c.syntax = 'cdk vagrant [options]'
  c.summary = 'Get vagrant box'
  c.example 'Get centos Vagrantbox from atlas and change name to centos-7.0 after', 'cdk vagrant --getbox humaton/centos-7'
  c.option '--getbox NAME', String, 'image name from atlas.hashicorp.com'
  c.option '--install-cdk-plugins', 'Install vagrant plugins for better CDK experience'
  c.action do |args, options|
    # Do something or c.when_called Cdk::Commands::List 'vagrant up humaton/centos-7 --provider libvirt'
    if options.getbox

      if system("#{vagrant_base_cmd} box add #{options.getbox}")
        say("Vagrant box was added")
      else
        say("There was a problem with vagrant box import")
      end
    end

    if options.install_cdk_plugins
      plugins = ["vagrant-registration","vagrant-atomic"]
      plugins.each do |p|
	say("Installing plugins...")
        say("Vagrant registration plugin installed") if system("#{vagrant_base_cmd} plugin install vagrant-registration")
	say("Vagrant atomic plugin installed") if system("#{vagrant_base_cmd} plugin install vagrant-atomic")	
      end      
    end

  end
end

command :run do |c|
  c.syntax = 'cdk run'
  c.summary = 'Run container on host using vagrant'
  c.description = 'This command invokes vagrant up in current directory'
  c.example 'Run container from Vagrantfile in current directory', 'cdk run'
  c.action do |args, options|
    # Do something or c.when_called Cdk::Commands::List
    exec("#{vagrant_base_cmd} up --provider=docker")
  end
end

command :list do |c|
  c.syntax = 'cdk list [options]'
  c.summary = 'List containers created by CDK'
  c.description = 'List containers created by CDK'
  c.example 'List currently active containers', 'cdk list'
  c.option '--host', 'Docker host to probe'
  c.action do |args, options|
    # Do something or c.when_called Cdk::Commands::List
  end
end

 command :destroy do |c|
  c.syntax = 'cdk destroy [options]'
  c.summary = 'Delete cdk data'
  c.description = 'rm -rf of project directory with possibility to cleanup vagrant machines associated with container'
  c.example 'Delete project directory and cleanup vagrant machines', 'cdk destroy --vagrant'
  c.option '--vagrant', 'Destroy vagrant machines'
  c.action do |args, options|
    # Do something or c.when_called Cdk::Commands::Destroy
  end
 end

 command :host do |c|
  c.syntax = 'cdk host [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--create', 'Some switch that does something'
  c.option '--delete', 'Some switch that does something'
  c.option '--list', 'Some switch that does something'
  c.action do |args, options|
    if options.list
      say("Your current options:")
      say("rhel-docker, rhel-atomic, centos-docker, centos-atomic")
    end  
    # Do something or c.when_called Cdk::Commands::List
  end
 end

 command :initialize do |c|
  c.syntax = 'cdk initialize [options]'
  c.summary = 'Initialize CDK configuration'
  c.description = 'Create .cdk/config.yaml with some important preconfigured data'
  c.action do |args, options|
      say("Setup options")
      
      docker_host = choose("Docker default host?", :docker, :atomic)
      docker_host_os = choose("Docker host default OS?", :centos, :rhel )
      virt_backend = choose("Prefered virtualisation method?", :libvirt, :vbox, :wmvare)
      
      vagrant = `which vagrant`
      conf = Cdkconfig.new(docker_host.to_s, docker_host_os.to_s, vagrant.to_s, virt_backend.to_s)
      conf.save_config
      download = agree("Download centos atomic box for provider: #{virt_backend}? [Y/N] ", false)
      
      if download
        system("vagrant box add #{conf.default_centos_box} --name centos-atomic-7")
      end
  end
 end  



